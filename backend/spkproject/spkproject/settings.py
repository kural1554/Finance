"""
Django settings for spkproject project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from rest_framework.permissions import AllowAny

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'standard_file': {
            'format': '%(asctime)s %(levelname)-8s [%(name)s:%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple_console': {
            'format': '{levelname} {asctime} {name}: {message}',
            'style': '{',
            'datefmt': '%H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple_console',
        },
        'application_logfile': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'log', 'application.log'),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 5,
            'formatter': 'standard_file',
        },
        'error_logfile': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'log', 'errors.log'),
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 3,
            'formatter': 'verbose',
        },
       
        'applicants_app_logfile': { 
            'level': 'DEBUG', 
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'log', 'applicants_app.log'), # Dedicated log file
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 3,
            'formatter': 'standard_file',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'application_logfile'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['error_logfile', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG', # Keep this DEBUG if you want to see SQL in console
            'propagate': False,
        },

        # === LOGGER FOR YOUR 'applicants' APP ===
        'applicants': { 
          
            'handlers': ['console', 'application_logfile', 'error_logfile', 'applicants_app_logfile'],
           
            'level': 'DEBUG',  # Capture all messages from DEBUG up from 'applicants' app
            'propagate': False, # Set to False if you want ONLY these handlers for 'applicants'.
                               # Set to True if you also want 'root' handlers to process these messages.
                               # For app-specific files, False is often cleaner.
        },
        # === End 'applicants' app logger ===

        # Loggers for your other apps (keep them or adjust as needed)
        'cashflow': {
            'handlers': ['console', 'application_logfile', 'error_logfile'],
            'level': 'DEBUG', # Or INFO if you don't need as much detail from them
            'propagate': False,
        },
        'employees': {
            'handlers': ['console', 'application_logfile', 'error_logfile'],
            'level': 'DEBUG', # Or INFO
            'propagate': False,
        },
        # ... and so on for finance_app, loanapp, loanrequest, property_management, comment

        'root': {
            'handlers': ['console', 'application_logfile'],
            'level': 'INFO',
        }
    }
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w+4nu=mgp&unb8!gfsgzo=3bjug&gw+2u2@r6!nff^)=dz2y!q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'employees',
    'applicants',
    'cashflow',
    'loanrequest',
    'finance_app',
    'property_management',
    'comment',
    'loanapp',
    'core',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = 'spkproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':[os.path.join(BASE_DIR, 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'spkproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'defaultdb',
#         'USER': 'avnadmin',
#         'PASSWORD': 'AVNS_x9yEdSDgXmR7pqRnYgW',  # replace with the actual password
#         'HOST': 'pg-5a6777f-santhosh20cs045k-744e.d.aivencloud.com',
#         'PORT': '25870',
#         'OPTIONS': {
#             'sslmode': 'disable',
#         },
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'updatespkfin',
        'USER': 'postgres',
        'PASSWORD': 'bharath',  # replace with the actual password
        'HOST': 'localhost',
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'disable',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
permission_classes = [AllowAny]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATICFILES_DIRS = [
   os.path.join(BASE_DIR, 'build/static')  # React build's static folder (CSS, JS, etc.)
]
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' 

#STATICFILES_DIRS = [os.path.join(BASE_DIR,'spkproject','static')]

# âœ… Media files (Uploaded Images)
MEDIA_URL = '/media/'  # URL to access media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media', 'uploads')
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # Adjust for your frontend URL
# ]
# CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"]
CORS_ALLOW_ALL_ORIGINS = True 
CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Good for browsable API
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Default to require login for APIs
    )
}
# settings.py (after REST_FRAMEWORK block)

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Access token valid for 1 hour
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),    # Refresh token valid for 1 day
    "ROTATE_REFRESH_TOKENS": False, # Set to True if you want new refresh token on each refresh
    "BLACKLIST_AFTER_ROTATION": False, # Requires blacklisting app if ROTATE_REFRESH_TOKENS is True
    "UPDATE_LAST_LOGIN": True, # Updates user's last_login field on login

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY, # Uses Django's SECRET_KEY
    "VERIFYING_KEY": None, # Usually not needed if SIGNING_KEY is set
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",), # Expects "Authorization: Bearer <token>"
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",       # Field on the User model for user_id claim
    "USER_ID_CLAIM": "user_id",  # Claim name in the token
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    # These are not typically used when using the standard Access/Refresh pair
    # "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    # "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    # "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

